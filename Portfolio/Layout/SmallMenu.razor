@inject NavigationManager navManager


<MudStack Class="rounded-xl py-4 px-2"
    Style="background-color: var(--mud-palette-appbar-background); backdrop-filter: blur(3px);">
    <MudIconButton Class="px-6" Icon="@menuIcon" Color="Color.Primary" OnClick='@MenuClicked' />
    @if (!menuCollapsed)
    {
        <div id="#b-animate">
            <Animate Anchor="#b-animate" Auto Animation="Animations.ZoomOutUp" Easing="Easings.EaseInOutSine">
                <MudStack Class="rounded-xl py-4 px-2">
                    <MudIconButton Icon="fas fa-atom" Color="Color.Dark" OnClick='() => GoTo("/")' />
                    <MudIconButton Icon="@Icons.Custom.Brands.MicrosoftVisualStudio" Color="Color.Dark" OnClick='() => GoTo("#projects")' />
                    <MudIconButton Icon="@Icons.Material.Filled.Person" Color="Color.Dark" OnClick='() => GoTo("#me")' />
                    <MudIconButton Icon="@Icons.Material.Filled.ConnectWithoutContact" Color="Color.Dark" OnClick='() => GoTo("#contact")' />
                    <MudIconButton Icon="@DarkLightModeButtonIcon" Color="Color.Dark" OnClick="@InvokeDarkModeAction" />
                </MudStack>
            </Animate>
        </div>
    }
</MudStack>



    @code {
    [Parameter] public Action DarkModeAction { get; set; }

    private void InvokeDarkModeAction()
    {
        DarkModeAction?.Invoke();
    }

    [Parameter] public string DarkLightModeButtonIcon { get; set; }
    [Parameter] public EventCallback<string> DarkLightModeButtonIconChanged { get; set; }

    bool menuCollapsed = true;

    void MenuClicked()
    {
        menuCollapsed = !menuCollapsed;
    }

    void GoTo(string to)
    {
        menuCollapsed = true;
        navManager.NavigateTo(to);
        StateHasChanged();
    }

    public string menuIcon => menuCollapsed switch
    {
        true => Icons.Material.Filled.Menu,
        false => Icons.Material.Filled.MenuOpen,
    };
}