@using MudBlazor.Utilities

<div class="@Classname" style="@Stylename">
    <MudGrid Style="height: 100%">
        <MudItem xs="12" sm="6">
            <div class="d-flex flex-column align-start justify-space-between" style="height: 100%">
                @if (string.IsNullOrEmpty(Project.Url))
                {
                    <MudText Typo="Typo.h6" Color="Color.Primary"><b>@Project.Name</b></MudText>
                }
                else
                {
                    <MudLink Typo="Typo.h6" Href="@Project.Url" Target="_blank" Color="Color.Primary"><b>@Project.Name</b></MudLink>
                }
                <div class="d-flex flex-row align-center flex-wrap gap-1">
                    @if (!string.IsNullOrEmpty(Project.RepoUrl))
                    {
                        <MudIconButton
                            Icon="@Icons.Custom.Brands.GitHub"
                            Color="Color.Surface"
                            Href="@Project.RepoUrl"
                            Target="_blank"
                            Variant="Variant.Text"/>
                    }
                    @foreach (var tech in Project.TechStack)
                    {
                        @TechStackChip(tech.Title, tech.Href, tech.Color)
                    }
                </div>
            </div>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudText Align="Align.End">@Project.Description</MudText>
        </MudItem>
    </MudGrid>
</div>


@code {

    [Parameter, EditorRequired]
    public required Models.Project Project { get; set; }

    [Parameter]
    public string Width { get; set; } = "100%";

    [Parameter]
    public string Height { get; set; } = "150px";

    [Parameter]
    public string? Class { get; set; }
    
    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public double Tint { get; set; } = 0.87;


    private int RgbCode => 0;

    private string Classname => new CssBuilder()
        .AddClass(Class, !string.IsNullOrEmpty(Class))
        .ToString();

    private string Stylename => new StyleBuilder()
        .AddStyle("min-height", Height)
        .AddStyle("width", Width)
        .AddStyle("background-size", "cover", !string.IsNullOrEmpty(Project.ImageUrl))
        .AddStyle("background-position", $"{Project.ImageOffsetX} {Project.ImageOffsetY}", !string.IsNullOrEmpty(Project.ImageUrl))
        .AddStyle("background-image", $"linear-gradient(rgba({RgbCode},{RgbCode},{RgbCode},{Tint}),rgba({RgbCode},{RgbCode},{RgbCode},{Tint})), url('{Project.ImageUrl}')", !string.IsNullOrEmpty(Project.ImageUrl))
        .ToString();


    private RenderFragment TechStackChip(string title, string href, string color)
        => @<MudChip
                T="string"
                Class="mud-link mud-link-underline-hover mx-0"
                Style="@($"color: {color}; background-color: {color}33")"
                Text="@title"
                Href="@href"
                Target="_blank"
                Variant="Variant.Text"
                Label="true"/>;

}